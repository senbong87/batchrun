#!/bin/bash

# program to batch run all command provide in a file

PROGNAME=$(basename $0)
CURRENT_TIME=$(date +"%x %r")
SUCCESS_LOG=.success_log
FAILURE_LOG=.failure_log
PROCESS_LOG=.process_log
RUNNING_LOG=.running_log
TIME_STAMP="$PROGNAME started at $CURRENT_TIME"


# variables used in compute cpu usage
prev_total=0
prev_idle=0
tmp_cpu_usage=
pid_cpu_usage=

# variables to check status of running
succ_no=0
fail_no=0
input_no=0
proc_no=0
run_no=0

# variables to store flag information
input=
limit=80

# variables to control display
line_num=3

# command line usage
usage () {
    echo "usage: $PROGNAME [ -h help | -i input | -n number | -l limit | -c clean ]" >&2
    return
}

# compute the cpu_usage
compute_cpu_usage () {

    while true; do
        # get the total cpu statistics, discarding the 'cpu' prefix.
        cpu=($(sed -n 's/^cpu\s//p' /proc/stat))
        idle=${cpu[3]}                      # just the idle cpu time.

        # calculate the total cpu time.
        total=0
        for value in "${cpu[@]}"; do
            total=$((total+value))
        done

        # calculate the cpu usage since we last checked.
        diff_idle=$((idle-prev_idle))
        diff_total=$((total-prev_total))
        diff_usage=$(((1000*($diff_total-$diff_idle)/$diff_total+5)/10))
        echo "$diff_usage" > $1

        # remember the total and idle cpu times for the next check.
        prev_total="$total"
        prev_idle="$idle"

        # wait before checking again.
        sleep 1
    done
}

# check whether the previous log files exist
check_env () {
    if [ -e $PROCESS_LOG ] || [ -e $SUCCESS_LOG ] || [ -e $FAILURE_LOG ]; then
        echo "$PROGNAME: conflicting log file(s)"
        echo "Try '$PROGNAME -c' to remove the log file(s)"
        exit 1
    fi

    if ! [[ $limit =~ ^[-+]?[0-9][0-9]?[0-9]?$ ]]; then
        echo "$PROGNAME: invalid limit value"
        echo "Limit must be an integer"
        exit 1
    fi

    if (( $limit < 0 || $limit > 100 )); then
        echo "$PROGNAME: invalid cpu usage limit"
        echo "Limit must be in the range of 0-100"
        exit 1
    fi
    return
}

# check whether the command can be find in path
in_path () {
    retval=1    oldIFS=$IFS     IFS=":"
    for directory in $2; do
        if [ -x $directory/$1 ]; then
            retval=0
        fi
    done
    IFS=$oldIFS
    return $retval
}

# clear file and kill the compute_cpu_usage process
clean_env () {
    if [ -n $pid_cpu_usage ]; then
        disown $pid_cpu_usage           # avoid the warning
        kill $pid_cpu_usage > /dev/null
    fi

    rm $tmp_cpu_usage 2> /dev/null
}

# check the command
check_command () {
    cmd=$(echo $1 | awk {'print $1'})
    
    if ! [ -x $cmd ] && ! in_path $cmd $PATH; then
        echo "$PROGNAME: invalid command '$cmd' in input file"
        exit 1
    fi
    return
}

# check the input file
check_file () {
    while read cmd; do
        check_command $cmd
    done < $1
}

# compute the cpu usage
cpu_usage () {
    cat $tmp_cpu_usage
}

# display process
display () {
    clear
    local format="\n\t%s\n"

    echo $TIME_STAMP
    printf "CPU usage       : %s\n" $(cpu_usage)
    printf "CPU usage limit : %s\n" $limit
    if [ -e $PROCESS_LOG ]; then
        printf "$format" "Processing command(s) & PID(s)"
        cat -n $PROCESS_LOG | tail -$line_num 
    fi

    if [ -e $RUNNING_LOG ]; then
        printf "$format" "Running command"
        cat -n $RUNNING_LOG | tail -$line_num
    fi

    if [ -e $SUCCESS_LOG ]; then
        printf "$format" "Exit with success command"
        cat -n $SUCCESS_LOG | tail -$line_num
    fi

    if [ -e $FAILURE_LOG ]; then
        printf "$format" "Exit with failure command"
        cat -n $FAILURE_LOG | tail -$line_num
    fi
    return
}

# display status
display_status () {
    unfin_no=$(($proc_no-$succ_no-$fail_no-$run_no))
    printf "\n\t********** Process statistics **********"
    printf "\n\tNo. running process(es)               : $run_no"
    printf "\n\tNo. successful finished process(es)   : $succ_no"
    printf "\n\tNo. unsuccessful finished process(es) : $fail_no"
    printf "\n\tNo. of unfinished process(es)         : $unfin_no\n\n"
    return
}

# count number of success and failure processes
count_process () {

    if [ -e $PROCESS_LOG ]; then
        proc_no=$(cat $PROCESS_LOG | wc -l)
        run_no=0

        while read cmd; do
            pid=$(echo $cmd | awk '{print $NF}')
            ps $pid > /dev/null
            if [ $? -eq 0 ]; then
                if ! [ -e $RUNNING_LOG ]; then
                    > $RUNNING_LOG
                fi

                grep -x "$cmd" $RUNNING_LOG > /dev/null
                if ! [ $? -eq 0 ]; then
                    echo $cmd >> $RUNNING_LOG
                fi
                ((run_no++))
            else
                if [ -e $RUNNING_LOG ]; then
                    grep -x "$cmd" $RUNNING_LOG > /dev/null
                    if [ $? -eq 0 ]; then
                        tmpfile=$(mktemp batchrun.XXXX)
                        grep -v "$cmd" $RUNNING_LOG > $tmpfile
                        mv $tmpfile $RUNNING_LOG
                    fi

                    if ! [[ -s $RUNNING_LOG ]]; then
                        rm $RUNNING_LOG
                    fi
                fi
            fi
        done < $PROCESS_LOG
    fi

    if [ -e $FAILURE_LOG ]; then
        fail_no=$(cat $FAILURE_LOG | wc -l)
    fi

    if [ -e $SUCCESS_LOG ]; then
        succ_no=$(cat $SUCCESS_LOG | wc -l)
    fi
}

# run the command from the file
run_command () {
    
    # run compute_cpu_usage in background to get the cpu usage
    tmp_cpu_usage=$(mktemp .cpu_usage.XXXX)
    compute_cpu_usage $tmp_cpu_usage &
    pid_cpu_usage=$!
    sleep 1

    # run the command and  monitor the cpu usage
    display
    while read command; do
        count_process

        while (( $(cpu_usage) > $limit )); do
            sleep 1
            display
        done
        
        check_command $command
        $TERM -e "$command && echo '$command' >> $SUCCESS_LOG \
            || echo $command >> $FAILURE_LOG" &
        echo "$command $!" >> $PROCESS_LOG
        sleep 1
        display
    done < $1

    input_no=$(cat $1 | wc -l)
    count_process
    display_status
    while (( $input_no != $succ_no + $fail_no )) && (( $run_no != 0 )); do
        count_process
        sleep 1
        display
        display_status
    done
}

# process command line options
while [[ -n $1 ]]; do
    case $1 in
        -l | --limit)   shift
                        limit=$1
                        ;;
        -i | --input)   shift
                        input=$1
                        ;;
        -n | --number)  shift
                        line_num=$1
                        ;;
        -c | --clean)   rm $PROCESS_LOG $SUCCESS_LOG \
                            $FAILURE_LOG $RUNNING_LOG 2> /dev/null 
                        exit
                        ;;
        -h | --help)    usage
                        exit
                        ;;
        *)              usage
                        exit 1
                        ;;
    esac
    shift
done

# validate the user input
if [[ -n $input ]]; then
    if [[ -e $input ]]; then
        check_env
        check_file $input
        run_command $input
        clean_env
    else
        echo "$PROGNAME: cannot access '$input': No such file exists"
        echo "Try '$PROGNAME -h' for more information"
        exit 1
    fi
else
    echo "$PROGNAME: missing input file"
    echo "Try '$PROGNAME -h' for more information"
    exit 1
fi
